<?php
// Prepend the library directory to the include_path
set_include_path(
    realpath(__DIR__ . '/../library') . PATH_SEPARATOR .
    get_include_path() . PATH_SEPARATOR
);

// Explode include_path and remove all trailing slashes
$paths = array_map(function($path) {
    return rtrim($path, DIRECTORY_SEPARATOR);
}, explode(PATH_SEPARATOR, get_include_path()));

// Register autoloader
spl_autoload_register(function($className) use ($paths) {
    $filename = str_replace('\\', DIRECTORY_SEPARATOR, $className) . '.php';

    foreach ($paths as $path) {
        $absPath = $path . DIRECTORY_SEPARATOR . $filename;

        if (is_file($absPath)) {
            require $absPath;
            return true;
        }
    }

    return false;
});

// Create a new DIC
$container = new Imbo\Container();

// Authentication key pairs (publicKey => privateKey)
$container->auth = array();

// Image object that can be used by the image resource
$container->image = $container->shared(function(Imbo\Container $container) {
    return new Imbo\Image\Image();
});

// Resources
$container->metadataResource = $container->shared(function(Imbo\Container $container) {
    return new Imbo\Resource\Metadata();
});
$container->imagesResource = $container->shared(function(Imbo\Container $container) {
    return new Imbo\Resource\Images();
});
$container->imageResource = $container->shared(function(Imbo\Container $container) {
    return new Imbo\Resource\Image($container->image);
});
$container->userResource = $container->shared(function(Imbo\Container $container) {
    return new Imbo\Resource\User();
});

// Parameters for the database driver
$dbParams = array(
    'databaseName'   => 'imbo',
    'collectionName' => 'images',
);

// Create the database entry
$container->database = $container->shared(function(Imbo\Container $container) use ($dbParams) {
    return new Imbo\Database\MongoDB($dbParams);
});

// Parameters for the storage driver
$storageParams = array(
    'dataDir' => '/some/path',
);

// Create the storage entry
$container->storage = $container->shared(function(Imbo\Container $container) use ($storageParams) {
    return new Imbo\Storage\Filesystem($storageParams);
});

// Create request and response objects
$container->request = new Imbo\Http\Request\Request($_GET, $_POST, $_SERVER);
$container->response = new Imbo\Http\Response\Response();

// Event manager
$container->eventManager = $container->shared(function(Imbo\Container $container) {
    $manager = new Imbo\EventManager\EventManager($container->request, $container->response, $container->image);
    $manager->attachListener(new Imbo\EventListener\AccessToken());

    return $manager;
});

// Return the container instance
return $container;
