<?php
/**
 * Imbo
 *
 * Copyright (c) 2011-2012, Christer Edvartsen <cogo@starzinger.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * * The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @package Imbo
 * @subpackage Server
 * @author Christer Edvartsen <cogo@starzinger.net>
 * @copyright Copyright (c) 2011-2012, Christer Edvartsen <cogo@starzinger.net>
 * @license http://www.opensource.org/licenses/mit-license MIT License
 * @link https://github.com/imbo/imbo
 */

namespace Imbo;

/**
 * Require Imbo autoloader
 */
require 'autoloader.php';

return array(
    /**
     * Authentication
     *
     * This value must be set to an array with key => value pairs mapping to public and private keys
     * of the users of this installation. The public keys must match the following case sensitive
     * expression:
     *
     * [a-z0-9_-]{3,}
     *
     * @var array
     */
    'auth' => array(),

    /**
     * Database configuration
     *
     * The 'driver' value must be set to one of the following:
     *
     * - A fully qualified class name of a driver that implements Imbo\Database\DatabaseInterface.
     *   Example: 'Imbo\Database\MongoDB'
     * - An instance of a class implementing Imbo\Database\DatabaseInterface
     *
     * The 'params' value will only be used if 'driver' is a string, and will be passed to the
     * contructor of the class specified in 'driver'.
     *
     * @var array
     */
    'database' => array(
        'driver' => 'Imbo\Database\MongoDB',
        'params' => array(
            'databaseName'   => 'imbo',
            'collectionName' => 'images',
        ),
    ),

    /**
     * Storage configuration
     *
     * The 'driver' value must be set to one of the following:
     *
     * - A fully qualified class name of a driver that implements Imbo\Storage\StorageInterface.
     *   Example: 'Imbo\Storage\Filesystem'
     * - An instance of a class implementing Imbo\Storage\StorageInterface
     *
     * The 'params' value will only be used if 'driver' is a string, and will be passed to the
     * contructor of the class specified in 'driver'.
     *
     * @var array
     */
    'storage' => array(
        'driver' => 'Imbo\Storage\Filesystem',
        'params' => array(
            'dataDir' => '/path/to/images',
        ),
    ),

    /**
     * Event listeners
     *
     * Each element in this array is another array with the following keys:
     *
     * - listener
     * - events
     * - publicKeys
     *
     * 'listener' is required and can be one of the following:
     *
     * - An instance of a class implementing Imbo\EventListener\ListenerInterface
     * - Any callable unit of code that will receive one argument: $event
     *
     * 'events' is an array of events the current listener will listen for. This only needs to be
     * set if 'listener' is not an instance of Imbo\EventListener\ListenerInterface.
     *
     * 'publicKeys' is an array that contains which public keys the listener will trigger for. If
     * omitted or left empty the listener will trigger for all users.
     *
     * Example of how to add different listeners:
     *
     * 'eventListeners' => array(
     *   array(
     *     'listener' => new Imbo\EventListener\AccessToken(),
     *   ),
     *   array(
     *     'listener' => new Imbo\EventListener\ImageTransformationCache('/tmp/imbocache'),
     *   ),
     *   array(
     *     'listener' => function($event) {
     *       // Some code
     *     },
     *     'events' => array(
     *       'image.get.pre', 'image.head.pre'
     *     ),
     *   ),
     * ),
     *
     * The listeners are triggered in the order they are added.
     *
     * @var array
     */
    'eventListeners' => array(
        array(
            'listener' => new EventListener\Authenticate(),
        ),
        array(
            'listener' => new EventListener\AccessToken(),
        ),
    ),

    /**
     * Image transformations
     *
     * This array includes all supported image transformations. The keys are the names of the
     * transformations that is used in the URL, and the values are closures that receives a single
     * parameter: $params, which is the parameters associated to the transformation.
     *
     * Example:
     *
     * t[]=border:width=2,height=3
     *
     * will end up doing a new Image\Transformation\Border(array('width' => 2, 'height' => 3))
     *
     * All closures must return an instance of the Imbo\Image\Transformation\TransformationInterface
     * interface or a callable piece of code, that in turn will receive a single parameter:
     *
     * Imbo\Image\ImageInterface $image
     *
     * which is the image you want your transformation to modify.
     */
    'transformations' => array(
        'border' => function (array $params) {
            return new Image\Transformation\Border($params);
        },
        'canvas' => function (array $params) {
            return new Image\Transformation\Canvas($params);
        },
        'compress' => function (array $params) {
            return new Image\Transformation\Compress($params);
        },
        'convert' => function (array $params) {
            return new Image\Transformation\Convert($params);
        },
        'crop' => function (array $params) {
            return new Image\Transformation\Crop($params);
        },
        'desaturate' => function (array $params) {
            return new Image\Transformation\Desaturate();
        },
        'flipHorizontally' => function (array $params) {
            return new Image\Transformation\FlipHorizontally();
        },
        'flipVertically' => function (array $params) {
            return new Image\Transformation\FlipVertically();
        },
        'maxsize' => function (array $params) {
            return new Image\Transformation\MaxSize($params);
        },
        'resize' => function (array $params) {
            return new Image\Transformation\Resize($params);
        },
        'rotate' => function (array $params) {
            return new Image\Transformation\Rotate($params);
        },
        'thumbnail' => function (array $params) {
            return new Image\Transformation\Thumbnail($params);
        },
        'transpose' => function (array $params) {
            return new Image\Transformation\Transpose();
        },
        'transverse' => function (array $params) {
            return new Image\Transformation\Transverse();
        },
    ),
);
