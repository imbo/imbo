<?php declare(strict_types=1);
namespace Imbo\Image\Transformation;

use Imagick;
use ImagickException;
use Imbo\Exception\TransformationException;
use Imbo\Http\Response\Response;
use Imbo\Model\Image;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\TestCase;

#[CoversClass(Sharpen::class)]
class SharpenTest extends TestCase
{
    #[DataProvider('getSharpenPresets')]
    public function testCanSharpen(array $params, ?float $radius, ?float $sigma, ?float $gain, ?float $threshold): void
    {
        $image = $this->createMock(Image::class);
        $image
            ->expects($this->once())
            ->method('setHasBeenTransformed')
            ->with(true);

        $imagick = $this->createMock(Imagick::class);
        $imagick
            ->expects($this->once())
            ->method('unsharpMaskImage')
            ->with($radius, $sigma, $gain, $threshold);

        (new Sharpen())
            ->setImage($image)
            ->setImagick($imagick)
            ->transform($params);
    }

    public function testThrowsExceptionOnError(): void
    {
        $imagick = $this->createMock(Imagick::class);
        $imagick
            ->expects($this->once())
            ->method('unsharpMaskImage')
            ->willThrowException($e = new ImagickException('some error'));

        $this->expectExceptionObject(new TransformationException('some error', Response::HTTP_BAD_REQUEST, $e));

        (new Sharpen())
            ->setImagick($imagick)
            ->transform([]);
    }

    /**
     * @return array<array{params:array,radius:?float,sigma:?float,gain:?float,threshold:?float}>
     */
    public static function getSharpenPresets(): array
    {
        return [
            [
                'params' => ['preset' => 'foobar'],
                'radius' => 2,
                'sigma' => 1,
                'gain' => 1,
                'threshold' => 0.05,
            ],
            [
                'params' => ['preset' => 'light'],
                'radius' => 2,
                'sigma' => 1,
                'gain' => 1,
                'threshold' => 0.05,
            ],
            [
                'params' => ['preset' => 'moderate'],
                'radius' => 2,
                'sigma' => 1,
                'gain' => 2,
                'threshold' => 0.05,
            ],
            [
                'params' => ['preset' => 'strong'],
                'radius' => 2,
                'sigma' => 1,
                'gain' => 3,
                'threshold' => 0.025,
            ],
            [
                'params' => ['preset' => 'extreme'],
                'radius' => 2,
                'sigma' => 1,
                'gain' => 4,
                'threshold' => 0,
            ],
            [
                'params' => [
                    'preset' => 'light',
                    'radius' => 10,
                    'sigma' => 11,
                    'gain' => 12,
                    'threshold' => 13,
                ],
                'radius' => 10,
                'sigma' => 11,
                'gain' => 12,
                'threshold' => 13,
            ],
        ];
    }
}
