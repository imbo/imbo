<?php
/**
 * This file is part of the Imbo package
 *
 * (c) Christer Edvartsen <cogo@starzinger.net>
 *
 * For the full copyright and license information, please view the LICENSE file that was
 * distributed with this source code.
 */

namespace ImboUnitTest\Image\Transformation;

use Imbo\Image\Transformation\Sharpen;

/**
 * @covers Imbo\Image\Transformation\Sharpen
 * @group unit
 * @group transformations
 */
class SharpenTest extends \PHPUnit_Framework_TestCase {
    /**
     * @var Sharpen
     */
    private $transformation;

    /**
     * Set up the transformation instance
     */
    public function setUp() {
        $this->transformation = new Sharpen();
    }

    /**
     * Tear down the transformation instance
     */
    public function tearDown() {
        $this->transformation = null;
    }

    public function getSharpenPresets() {
        return [
            'non-existing' => [
                'foobar', 2, 1, 1, 0.05,
            ],
            'light' => [
                'light', 2, 1, 1, 0.05,
            ],
            'moderate' => [
                'moderate', 2, 1, 2, 0.05,
            ],
            'strong' => [
                'strong', 2, 1, 3, 0.025,
            ],
            'extreme' => [
                'extreme', 2, 1, 4, 0,
            ],
        ];
    }

    /**
     * @dataProvider getSharpenPresets
     */
    public function testProvidesSharpenPresets($preset, $radius, $sigma, $gain, $threshold) {
        $image = $this->createMock('Imbo\Model\Image');
        $image->expects($this->once())->method('hasBeenTransformed')->with(true);

        $imagick = $this->createMock('Imagick');
        $imagick->expects($this->once())->method('unsharpMaskImage')->with($radius, $sigma, $gain, $threshold);

        $this->transformation->setImage($image)->setImagick($imagick)->transform([
            'preset' => $preset,
        ]);
    }

    public function testParamsCanOverridePresetValues() {
        $image = $this->createMock('Imbo\Model\Image');
        $image->expects($this->once())->method('hasBeenTransformed')->with(true);

        $imagick = $this->createMock('Imagick');
        $imagick->expects($this->once())->method('unsharpMaskImage')->with(11, 1, 10, 0);

        $this->transformation->setImage($image)->setImagick($imagick)->transform([
            'preset' => 'extreme',
            'gain' => 10,
            'radius' => 11,
        ]);
    }
}
